# -*- coding: utf-8 -*-
"""Training Image Processing_Bisma

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ofe29SIbVGUlOFizV7XO8velutnCL1Lh

Ini adalah kumpulan syntax saat belajar Image Processing
Maaf jika berantakan, karena lagi belajar
"""

from skimage import data
from skimage import color
from skimage import io
import matplotlib.pyplot as plt
import numpy as np

rocket_image = data.rocket()
rocket_image

grayscale = color.rgb2gray(rocket_image)
rgb = color.gray2rgb(grayscale)

def show_image(image, title='Image', cmap_type='gray'):
  plt.imshow(image, cmap=cmap_type)
  plt.title(title)
  plt.axis('Off')
  plt.show

show_image(grayscale, 'Graysclae')

"""COLORS WITH NUMPY"""

image = io.imread('/content/image.jpg')

plt.imshow(image)
plt.title('Original Image')
plt.axis('off')
plt.show()

#mendapatkan red values dari gambar
red = image[:,:,0]

#mendapatkan green values dari gambar
green = image[:,:,1]

#mendapatkan blue values dari gambar
blue = image[:,:,2]

plt.imshow(red)
plt.title('Red')
plt.axis('off')
plt.show()

plt.imshow(green)
plt.title('Green')
plt.axis('off')
plt.show()

plt.imshow(blue)
plt.title('Blue')
plt.axis('off')
plt.show()

plt.imshow(red, cmap='gray')
plt.title('Red')
plt.axis('off')
plt.show()
plt.imshow(green, cmap='gray')
plt.title('Green')
plt.axis('off')
plt.show()
plt.imshow(blue, cmap='gray')
plt.title('Blue')
plt.axis('off')
plt.show()

#Akses shape gambar
image.shape

image.size

#Flip Gambar secara Vertikal maupun horizonal
flip_ud = np.flipud(image)
show_image(flip_ud, 'Flipud')

flip_lr = np.fliplr(image)
show_image(flip_lr, 'Fliplr')

plt.hist(red.ravel(), bins=256, fc='r')

plt.hist(blue.ravel(), bins=256, fc='blue')

plt.hist(green.ravel(), bins=256, fc='green')

"""Thresholding"""

# Import the otsu threshold function
from skimage.filters import threshold_otsu
from skimage.color import rgb2gray
from skimage import data
import matplotlib.pyplot as plt

# Make the image grayscale using rgb2gray
rocket_gray = rgb2gray(image)

# Obtain the optimal threshold value with otsu
thresh = threshold_otsu(rocket_gray)

# Apply thresholding to the image
binary = rocket_gray > thresh

# Function to show images
def show_image(image, title):
    plt.imshow(image, cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.show()

# Show the binary image
show_image(binary, 'Binary image')

# Obtain the optimal otsu global threshold value
global_thresh = threshold_otsu(rgb2gray(image))

# Obtain the binary image by applying global thresholding
binary_global = rocket_gray > global_thresh

# Function to show images
def show_image(image, title):
    plt.imshow(image, cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.show()

# Show the binary image obtained
show_image(binary_global, 'Global thresholding')

# Import the local threshold function
from skimage.filters import threshold_local

# Set the block size to 35
block_size = 35

# Obtain the optimal local thresholding
local_thresh = threshold_local(rocket_gray, block_size, offset=10)

# Obtain the binary image by applying local thresholding
binary_local = rocket_gray > local_thresh

# Show the binary image
show_image(binary_local, 'Local thresholding')

# Import the try all function
from skimage.filters import try_all_threshold

# Import the rgb to gray convertor function
from skimage.color import rgb2gray

# Turn the fruits_image to grayscale
grayscale = rgb2gray(image)

# Use the try all method on the resulting grayscale image
fig, ax = try_all_threshold(grayscale, verbose=False)

# Show the resulting plots
plt.show()

# Import threshold and gray convertor functions
from skimage.filters import threshold_otsu
from skimage.color import rgb2gray

# Obtain the optimal thresh
thresh = threshold_otsu(grayscale)

# Obtain the binary image by applying thresholding
binary_image = grayscale > thresh

# Show the resulting binary image
show_image(binary_image, 'Binarized image')

"""Filtering"""

import cv2
import matplotlib.pyplot as plt

image = cv2.imread('image.jpg', cv2.IMREAD_GRAYSCALE)

# Applying a Gaussian filter
gaussian_blur = cv2.GaussianBlur(image, (5, 5), 0)

plt.imshow(gaussian_blur, cmap='gray')
plt.title('Gaussian Blurred Image')
plt.show()

"""Edge Detection"""

import cv2
import matplotlib.pyplot as plt

image = cv2.imread('image.jpg', cv2.IMREAD_GRAYSCALE)
edges = cv2.Canny(image, 100, 200)

plt.imshow(edges, cmap='gray')
plt.title('Edge Detection')
plt.show()

"""Blurring"""

blurred = cv2.GaussianBlur(image, (5, 5), 0)
plt.imshow(blurred, cmap='gray')
plt.title('Blurred Image')
plt.show()

# Median Blur
median_blur = cv2.medianBlur(image, 5)

plt.imshow(median_blur, cmap='gray')
plt.title('Median Blurred Image')
plt.show()

"""Contrast Enhancement"""

clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
enhanced = clahe.apply(image)

plt.imshow(enhanced, cmap='gray')
plt.title('Contrast Enhanced Image')
plt.show()

import numpy as np

contrast = image.std()
print(f'Image Contrast: {contrast}')

"""Medical Enhancement Images"""

# Load and enhance a medical image (e.g., X-ray)
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
enhanced_medical = clahe.apply(image)

plt.imshow(enhanced_medical, cmap='gray')
plt.title('Enhanced Medical Image')
plt.show()

"""Aerial Images"""

# Adjust brightness for an aerial image
brightened = cv2.convertScaleAbs(image, alpha=1.2, beta=30)

plt.imshow(brightened, cmap='gray')
plt.title('Brightened Aerial Image')
plt.show()

"""Gamma Correction"""

gamma = 2.0
adjusted = np.power(image / 255.0, gamma)
plt.imshow(adjusted, cmap='gray')
plt.title('Gamma Adjusted Image')
plt.show()

"""Transformation"""

# Translation (Shifting Image)
rows, cols = image.shape
translation_matrix = np.float32([[1, 0, 50], [0, 1, 50]])  # Shift by 50 pixels
translated = cv2.warpAffine(image, translation_matrix, (cols, rows))

plt.imshow(translated, cmap='gray')
plt.title('Translated Image')
plt.show()

"""Enlarged"""

# Enlarge the image by 2x
enlarged = cv2.resize(image, None, fx=2, fy=2, interpolation=cv2.INTER_CUBIC)

plt.imshow(enlarged, cmap='gray')
plt.title('Enlarged Image')
plt.show()

"""Resize"""

height, width = image.shape
new_width = 200
new_height = int(new_width * height / width)
resized = cv2.resize(image, (new_width, new_height))

plt.imshow(resized, cmap='gray')
plt.title('Resized Image')
plt.show()

"""Morfology"""

kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
dilated = cv2.dilate(image, kernel, iterations=1)

plt.imshow(dilated, cmap='gray')
plt.title('Morphological Operation')
plt.show()

"""Handwritten"""

# Threshold handwritten text for binary representation
_, binary_handwritten = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)

plt.imshow(binary_handwritten, cmap='gray')
plt.title('Binary Threshold of Handwritten Letters')
plt.show()

"""Improving Thresholded Images"""

_, thresholded = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
plt.imshow(thresholded, cmap='gray')
plt.title('Thresholded Image')
plt.show()

"""Restorasi"""

# Inpainting to restore missing regions in an image
import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread('damaged_image.jpg', cv2.IMREAD_COLOR)
mask = cv2.imread('mask.jpg', cv2.IMREAD_GRAYSCALE)  # Binary mask for damaged areas

restored = cv2.inpaint(image, mask, 3, cv2.INPAINT_TELEA)

plt.imshow(cv2.cvtColor(restored, cv2.COLOR_BGR2RGB))
plt.title('Restored Image')
plt.show()

# Example of restoring text-removed areas using inpainting
restored_text = cv2.inpaint(image, mask, 5, cv2.INPAINT_NS)

plt.imshow(cv2.cvtColor(restored_text, cv2.COLOR_BGR2RGB))
plt.title('Restored Damaged Image')
plt.show()

"""Removing Logo"""

# Remove a logo by inpainting
logo_removed = cv2.inpaint(image, mask, 3, cv2.INPAINT_TELEA)

plt.imshow(cv2.cvtColor(logo_removed, cv2.COLOR_BGR2RGB))
plt.title('Logo Removed')
plt.show()

"""Remove Background"""



!pip install rembg
!pip install onnxruntime

from rembg import remove
from PIL import Image
import io

# Open the input image
with open('/content/WhatsApp Image 2025-01-18 at 15.16.27_35b16cb3.jpg', 'rb') as file:
    input_image = file.read()

# Remove the background
output_image = remove(input_image)

# Save the result
with open('output_image.png', 'wb') as file:
    file.write(output_image)

from rembg import remove
from PIL import Image
import io

# Open the input image
with open('/content/pngtree-black-suit-png-image_12432308.jpg', 'rb') as file:
    input_image = file.read()

# Remove the background
output_image_jas = remove(input_image)

# Save the result
with open('output_image_jas.png', 'wb') as file:
    file.write(output_image_jas)